{"version":3,"sources":["../src/webhooks.ts"],"sourcesContent":["import { getEnvVariable } from '@clerk/shared/getEnvVariable';\nimport { errorThrower } from 'src/util/shared';\nimport { Webhook } from 'svix';\n\nimport type { WebhookEvent } from './api/resources/Webhooks';\n\n/**\n * @inline\n */\nexport type VerifyWebhookOptions = {\n  /**\n   * The signing secret for the webhook. It's recommended to use the [`CLERK_WEBHOOK_SIGNING_SECRET` environment variable](https://clerk.com/docs/deployments/clerk-environment-variables#webhooks) instead.\n   */\n  signingSecret?: string;\n};\n\nconst SVIX_ID_HEADER = 'svix-id';\nconst SVIX_TIMESTAMP_HEADER = 'svix-timestamp';\nconst SVIX_SIGNATURE_HEADER = 'svix-signature';\n\nconst REQUIRED_SVIX_HEADERS = [SVIX_ID_HEADER, SVIX_TIMESTAMP_HEADER, SVIX_SIGNATURE_HEADER] as const;\n\nexport * from './api/resources/Webhooks';\n\n/**\n * Verifies the authenticity of a webhook request using Svix. Returns a promise that resolves to the verified webhook event data.\n *\n * @param request - The request object.\n * @param options - Optional configuration object.\n *\n * @example\n * See the [guide on syncing data](https://clerk.com/docs/webhooks/sync-data) for more comprehensive and framework-specific examples that you can copy and paste into your app.\n *\n * ```ts\n * try {\n *   const evt = await verifyWebhook(request)\n *\n *   // Access the event data\n *   const { id } = evt.data\n *   const eventType = evt.type\n *\n *   // Handle specific event types\n *   if (evt.type === 'user.created') {\n *     console.log('New user created:', evt.data.id)\n *     // Handle user creation\n *   }\n *\n *   return new Response('Success', { status: 200 })\n * } catch (err) {\n *   console.error('Webhook verification failed:', err)\n *   return new Response('Webhook verification failed', { status: 400 })\n * }\n * ```\n */\nexport async function verifyWebhook(request: Request, options: VerifyWebhookOptions = {}): Promise<WebhookEvent> {\n  const secret = options.signingSecret ?? getEnvVariable('CLERK_WEBHOOK_SIGNING_SECRET');\n  const svixId = request.headers.get(SVIX_ID_HEADER);\n  const svixTimestamp = request.headers.get(SVIX_TIMESTAMP_HEADER);\n  const svixSignature = request.headers.get(SVIX_SIGNATURE_HEADER);\n\n  if (!secret) {\n    return errorThrower.throw(\n      'Missing webhook signing secret. Set the CLERK_WEBHOOK_SIGNING_SECRET environment variable with the webhook secret from the Clerk Dashboard.',\n    );\n  }\n\n  if (!svixId || !svixTimestamp || !svixSignature) {\n    const missingHeaders = REQUIRED_SVIX_HEADERS.filter(header => !request.headers.has(header));\n    return errorThrower.throw(`Missing required Svix headers: ${missingHeaders.join(', ')}`);\n  }\n\n  const sivx = new Webhook(secret);\n  const body = await request.text();\n\n  return sivx.verify(body, {\n    [SVIX_ID_HEADER]: svixId,\n    [SVIX_TIMESTAMP_HEADER]: svixTimestamp,\n    [SVIX_SIGNATURE_HEADER]: svixSignature,\n  }) as WebhookEvent;\n}\n"],"mappings":";;;;;AAAA,SAAS,sBAAsB;AAE/B,SAAS,eAAe;AAcxB,IAAM,iBAAiB;AACvB,IAAM,wBAAwB;AAC9B,IAAM,wBAAwB;AAE9B,IAAM,wBAAwB,CAAC,gBAAgB,uBAAuB,qBAAqB;AAkC3F,eAAsB,cAAc,SAAkB,UAAgC,CAAC,GAA0B;AAC/G,QAAM,SAAS,QAAQ,iBAAiB,eAAe,8BAA8B;AACrF,QAAM,SAAS,QAAQ,QAAQ,IAAI,cAAc;AACjD,QAAM,gBAAgB,QAAQ,QAAQ,IAAI,qBAAqB;AAC/D,QAAM,gBAAgB,QAAQ,QAAQ,IAAI,qBAAqB;AAE/D,MAAI,CAAC,QAAQ;AACX,WAAO,aAAa;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAEA,MAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,eAAe;AAC/C,UAAM,iBAAiB,sBAAsB,OAAO,YAAU,CAAC,QAAQ,QAAQ,IAAI,MAAM,CAAC;AAC1F,WAAO,aAAa,MAAM,kCAAkC,eAAe,KAAK,IAAI,CAAC,EAAE;AAAA,EACzF;AAEA,QAAM,OAAO,IAAI,QAAQ,MAAM;AAC/B,QAAM,OAAO,MAAM,QAAQ,KAAK;AAEhC,SAAO,KAAK,OAAO,MAAM;AAAA,IACvB,CAAC,cAAc,GAAG;AAAA,IAClB,CAAC,qBAAqB,GAAG;AAAA,IACzB,CAAC,qBAAqB,GAAG;AAAA,EAC3B,CAAC;AACH;","names":[]}